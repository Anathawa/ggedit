[
["index.html", "Using the ggedit package Preface", " Using the ggedit package Metrum Research Group 2017-04-04 Preface ggedit is an R package that is used to facilitate ggplot formatting. With ggedit, R users of all experience levels can easily move from creating ggplots to refining aesthetic details, all while maintaining portability for further reproducible research and collaboration. ggedit is run from an R console or as a reactive object in any Shiny application. The user inputs a ggplot object or a list of objects. The application populates Bootstrap modals with all of the elements found in each layer, scale, and theme of the ggplot objects. The user can then edit these elements and interact with the plot as changes occur. During editing, a comparison of the script is logged, which can be directly copied and shared. The application output is a nested list containing the edited layers, scales, and themes in both object and script form, so you can apply the edited objects independent of the original plot using regular ggplot2 grammar. Why does it matter? ggedit promotes efficient collaboration. You can share your plots with team members to make formatting changes, and they can then send any objects they’ve edited back to you for implementation. No more email chains to change a circle to a triangle! Short clip from rstudio::conf 2017 (13:40-19:40) User Lightning Talks – RStudio "],
["installation.html", "Chapter 1 Installation ", " Chapter 1 Installation "],
["cran.html", "1.1 CRAN", " 1.1 CRAN install.packages(&#39;ggedit&#39;) For a quick example, run the following: library(&#39;ggedit&#39;) library(ggplot2) p &lt;- ggplot(mtcars, aes(x = hp, y = wt)) + geom_point() + geom_smooth() p2 &lt;- ggedit(p) names(p2) # will show you which objects are available. plot(p2) # shows the updated plot (it is available in the first element of p2) "],
["dev.html", "1.2 DEV", " 1.2 DEV The package is currently under continuous development for the most up to date version run the script below. devtools::install_github(&quot;metrumresearchgroup/ggedit&quot;) -->"],
["current-development.html", "Chapter 2 Current Development", " Chapter 2 Current Development Download current dev source file ggedit_0.2.1 print.ggedit S3 method to print directly from the output object to the console the script to reproduce changes on the original plot object print(obj) point geom_point(mapping=aes(colour=Species),alpha=0.5,size=3)+ scale_colour_manual(values=c(&#39;#9E4A3F&#39;,&#39;#008B45&#39;,&#39;#6495ED&#39;)) pointWrap geom_point(mapping=aes(colour=Species),size=6)+ theme(panel.background=element_rect(fill=&#39;white&#39;)) boxplotWrap geom_boxplot() pointLine geom_point(mapping=aes(shape=Species,colour=Petal.Width),size=6)+geom_line(linetype=2) compare compare two theme objects and return script or new theme object with only the differences between the two compare(theme_bw(),theme_get()) theme(legend.key=element_rect(fill=&#39;white&#39;), panel.background=element_rect(fill=&#39;white&#39;), panel.grid.major=element_line(colour=&#39;grey92&#39;), panel.grid.minor=element_line(colour=&#39;grey92&#39;), strip.background=element_rect(colour=&#39;grey20&#39;) ) ggedit(p.in,…), where the following arguments can be passed in to the ellipses viewer shiny viewer options. It can be either paneViewer (default with minHeight=1000), dialogViewer, browserViewer verbose logical to control if the output includes script for layers and themes calls for parsing to create objects (default, verbose=TRUE) showDefaults toggle to control if the verbose output shows all the input arguments passed to the proto object (if verbose==FALSE then ignored) width,height dimensions of the renderPlot where the active plot is displayed "],
["limitations.html", "Chapter 3 Limitations ", " Chapter 3 Limitations "],
["layers.html", "3.1 Layers", " 3.1 Layers geom_text: family is not currently open to change non colour aesthetics of numeric inputs are not currently supported, e.g.: iris%&gt;%ggplot(aes(x=Sepal.Length,y=Sepal.Width))+ geom_point()+ geom_text(aes(label=Species,size=Sepal.Length)) "],
["themes.html", "3.2 Themes", " 3.2 Themes margin,arrow are not currently available to edit -->"],
["deploying.html", "Chapter 4 Deploying", " Chapter 4 Deploying from the console: ggedit(p) from the addin toolbar: highlight script of a plot object on the source editor window of RStudio and run from toolbar. Shiny: use the Shiny module syntax to call the ggEdit UI elements. server: callModule(ggEdit,'pUI',obj=reactive(p)) ui: ggEditUI('pUI') "],
["console.html", "4.1 Console", " 4.1 Console "],
["addin.html", "4.2 Addin", " 4.2 Addin To launch the Shiny gadget from the addin menu highlight the code that creates the plot object or the plot name in the source pane of Rstudio, then click on the ggedit addin from the Addins the dropdown menu. "],
["shiny.html", "4.3 Shiny", " 4.3 Shiny -->"],
["outputs.html", "Chapter 5 Outputs", " Chapter 5 Outputs ggedit returns a list containing 8 elements either to the global enviroment or as a reactive output in Shiny. updatedPlots List containing updated ggplot objects updatedLayers For each plot a list of updated layers (ggproto) objects Portable object updatedLayersElements For each plot a list elements and their values in each layer Can be used to update the new values in the original code updatedLayerCalls For each plot a list of scripts that can be run directly from the console to create a layer updatedThemes For each plot a list of updated theme objects Portable object If the user doesn’t edit the theme updatedThemes will not be returned updatedThemeCalls For each plot a list of scripts that can be run directly from the console to create a theme updatedScales For each plot a list of updated scales (ggproto) objects Portable object updatedScaleCalls For each plot a list of scripts that can be run directly from the console to create a scale "],
["updating-aesthetics.html", "Chapter 6 Updating Aesthetics ", " Chapter 6 Updating Aesthetics "],
["layers-1.html", "6.1 Layers", " 6.1 Layers The gadget creates a popup window which is populated by the information found in each layer. You can edit the aesthetic values found in a layer and see the changes happen in real time. You can edit the aesthetic layers while still preserving the original plot, because the changed layers are cloned from the original plot object and are independent of it. The edited layers are provided in the output as objects, so you can use the layers independent of the plot using regular ggplot2 grammar. This is a great advantage when collaborating with other people, where you can send a plot to team members to edit the layers aesthetics and they can send you back just the new layers for you to implement them. "],
["themes-1.html", "6.2 Themes", " 6.2 Themes ggedit also has a theme editor inside. You can edit any element in the theme and see the changes in real time, making the trial and error process quick and easy. Once you are satisfied with the edited theme you can apply it to other plots in the plot list with one click or even make it the session theme regardless of the gadget. As with layers, the new theme object is part of the output, making collaboration easy. -->"],
["verbose-outputs.html", "Chapter 7 Verbose Outputs", " Chapter 7 Verbose Outputs A new argument has been added to the ggedit call. If verbose is set to true on the ggedit call then for the: Layer output: In addition to the new ggproto object the user will also get the ggplot script that can be parsed/pasted in the console to create the same layer. Theme output: In addition to the new theme object the user will also get the ggplot script that can be parsed/pasted in the console to create the same theme. Scale output: In addition to the new scale object the user will also get the ggplot script that can be parsed/pasted in the console to create the same scale. During the editing users are able to see in real time the updates to the verbose scripts of the layers in a shinyAce window above the plot. They can copy the script directly to their clipboard to use in further analysis. "],
["package-functions.html", "Chapter 8 Package Functions ", " Chapter 8 Package Functions "],
["rgg.html", "8.1 rgg", " 8.1 rgg After you finish editing the plots the natural progression is to use them in the rest of the script. In ggedit there is the function rgg (remove and replace ggplot). Using this function you can chain into the original code changes to the plot without multiplying script needlessly. Specify which layer you want to remove from a plot: ggObj%&gt;%rgg('line') Provide an index to a specific layer, in instances where there are more than one layer of the same type in the plot ggObj%&gt;%rgg('line',2) Remove a layer from ggObj and replace it with a new one from the ggedit output p.out ggObj%&gt;%rgg('line',newLayer = p.out$UpdatedLayers) Remove a layer and replace it with a new one and the new theme ggObj%&gt;%rgg('line',newLayer = p.out$UpdatedLayers)+p.out$UpdatedThemes "],
["remove-geom.html", "8.2 remove_geom", " 8.2 remove_geom "],
["gggsave.html", "8.3 gggsave", " 8.3 gggsave generalized ggsave to save multiple outputs of ggplot to single file and multiple files from a single call. Plots can be saved to various graphic devices. #single file output to pdf gggsave(&#39;Rplots.pdf&#39;,plot=pList) #multiple file output to pdf gggsave(&#39;Rplots.pdf&#39;,plot=pList,onefile=F) #multiple file output to png gggsave(&#39;Rplots.png&#39;,plot=pList) "],
["compare.html", "8.4 compare", " 8.4 compare "],
["clonelayer.html", "8.5 cloneLayer", " 8.5 cloneLayer "],
["print-ggedit.html", "8.6 print.ggedit", " 8.6 print.ggedit "],
["plot-ggedit.html", "8.7 plot.ggedit", " 8.7 plot.ggedit There is also a plotting function for ggedit objects that creates a grid.view for you and finds the best grid size for the amount of plots you have in the list. And for the exotic layouts you can give specific positions and the rest will be done for you. If you didn’t use ggedit, you can still add the class to any ggplot and use the plotting function just the same. plot(as.ggedit(list(p0,p1,p2,p3)),list(list(rows=1,cols=1:3), list(rows=2,cols=2), list(rows=2,cols=1), list(rows=2,cols=3)) ) -->"]
]
